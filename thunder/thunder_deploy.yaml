apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: thunder-deployment
  template: thunder-deployment-template
metadata:
  name: thunder-deployment
  namespace: openshift
objects:

#Create Secrets
- apiVersion: v1
  kind: Secret
  metadata:
    name: '${THUNDER_PROJECT_NAME}-secret'
    namespace: ${THUNDER_PROJECT_NAME}
  stringData:
    site-user: '${SITE_USER}'
    site-password: '${SITE_PASSWORD}'

#Create Storage for Thunder files
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${THUNDER_PROJECT_NAME}-storage
    namespace: ${THUNDER_PROJECT_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '${VOLUME_CAPACITY}'

#Thunder Deployment
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: thunder-deployment
      template: thunder-deployment-template
    name: thunder-deployment
    namespace: ${THUNDER_PROJECT_NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: thunder-deployment
      deploymentconfig: thunder-deployment
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 10%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
              - /bin/sh
              - '-c'
              - bash drush.sh
            containerName: thunder-alpine
            volumes:
              - ${THUNDER_PROJECT_NAME}-site
          failurePolicy: Abort
        timeoutSeconds: 800
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: thunder-deployment
          deploymentconfig: thunder-deployment
      spec:
        containers:
          - env:
              - name: SITE_INSTALL
                value: 'yes'
                # value: 'no'
              - name: DRUSH_INSTALL
                value: 'no'
              - name: MYSQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: mysql
                    key: database-name
                # value: sampledb
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    name: mysql
                    key: database-user
                # value: userSRO
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql
                    key: database-password
                # value: 1oCDQyF5rEmH4gyM
              - name: MYSQL_HOST
                value: mysql.${THUNDER_PROJECT_NAME}.svc
              - name: MYSQL_PORT
                value: '3306'
              - name: SITE_USER
                valueFrom:
                  secretKeyRef:
                    name: '${THUNDER_PROJECT_NAME}-secret'
                    key: site-user
              - name: SITE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: '${THUNDER_PROJECT_NAME}-secret'
                    key: site-password
            image: docker-registry.default.svc/${JENKINS_PROJECT_NAME}/thunder-alpine
            imagePullPolicy: Always
            name: thunder-alpine
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 80
                scheme: HTTP
              initialDelaySeconds: 240
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 60
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /
                port: 80
                scheme: HTTP
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 15
            ports:
              - containerPort: 80
                protocol: TCP
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${GUARANT_CPU}
                memory: ${GUARANT_MEMORY}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - name: ${THUNDER_PROJECT_NAME}-site
                mountPath: "/usr/share/nginx/html/sites/default"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - name: ${THUNDER_PROJECT_NAME}-site
            persistentVolumeClaim:
              claimName: ${THUNDER_PROJECT_NAME}-storage
    test: false
    triggers:
      - imageChangeParams:
          automatic: false
          containerNames:
            - thunder-alpine
          from:
            kind: ImageStreamTag
            name: 'thunder-alpine:latest'
            namespace: ${JENKINS_PROJECT_NAME}
          lastTriggeredImage: docker-registry.default.svc/${JENKINS_PROJECT_NAME}/thunder-alpine
        type: ImageChange
      - type: ConfigChange
        
# Thunder Deploymen Autoscaling
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    labels:
      app: thunder-deployment
      template: thunder-deployment-template
    name: thunder-deployment
    namespace: ${THUNDER_PROJECT_NAME}
  spec:
    maxReplicas: 3
    minReplicas: 1
    scaleTargetRef:
      apiVersion: v1
      kind: DeploymentConfig
      name: thunder-deployment
    targetCPUUtilizationPercentage: 70

#Create Service for Deployment
- apiVersion: v1
  kind: Service
  metadata:
    name: thunder-service
    namespace: ${THUNDER_PROJECT_NAME}
  spec:
    ports:
      - name: 80-tcp
        port: 80
        protocol: TCP
        targetPort: 80
    selector:
      deploymentconfig: thunder-deployment
    sessionAffinity: None
    type: ClusterIP

#Create route to Service
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: thunder-deployment
      template: thunder-deployment-template
    name: thunder-route
    namespace: ${THUNDER_PROJECT_NAME}
  spec:
    port:
      targetPort: 80-tcp
    to:
      kind: Service
      name: thunder-service
      weight: 100
    wildcardPolicy: None

parameters:
- description: Project (Namespace)
  displayName: Project (Namespace)
  name: JENKINS_PROJECT_NAME
  # value: "jenkins-ci"
- description: Project (Namespace)
  displayName: Project (Namespace)
  name: THUNDER_PROJECT_NAME
  # value: "thunder"
- description: Jenkins Storage type.
  displayName: Jenkins Starage
  name: STORAGE_ACCSESS_MODE
  value: "ReadWriteOnce"
- description: Jenkins Storage Size.
  displayName: Jenkins Starage Size
  name: STORAGE_SIZE
  value: "1Gi"
- description: The minimum amount of CPU the container is guaranteed.
  displayName: CPU Gauraneed
  name: GUARANT_CPU
  value: 100m
- description: The maximum amount of CPU the container is allowed to use when running.
  displayName: CPU Limit
  name: CPU_LIMIT
  value: 500m
- description: The maximum amount of memory the container is allowed to use when running.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  value: 512Mi
- description: The minimum amount of memory the container is guaranteed.
  displayName: Memory Gauraneed
  name: GUARANT_MEMORY
  value: 256Mi
- description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 2Gi
- description: Username for Site admin.
  displayName: Username for Site admin.
  from: 'admin_[A-Z0-9]{3}'
  generate: expression
  name: SITE_USER
  required: true
- description: Password for the Site admin user.
  displayName: Password for the Site admin user.
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SITE_PASSWORD
  required: true